{"/home/travis/build/npmtest/node-npmtest-prom-client/test.js":"/* istanbul instrument in package npmtest_prom_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-prom-client/lib.npmtest_prom_client.js":"/* istanbul instrument in package npmtest_prom_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_prom_client = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_prom_client = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-prom-client/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-prom-client && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_prom_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_prom_client\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_prom_client.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_prom_client.rollup.js'] =\n            local.assetsDict['/assets.npmtest_prom_client.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_prom_client.__dirname + '/lib.npmtest_prom_client.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/index.js":"/**\n * Prometheus client\n * @module Prometheus client\n */\n\n'use strict';\n\nexports.register = require('./lib/register');\nexports.contentType = require('./lib/register').contentType;\n\nexports.Counter = require('./lib/counter');\nexports.Gauge = require('./lib/gauge');\nexports.Histogram = require('./lib/histogram');\nexports.Summary = require('./lib/summary');\nexports.Pushgateway = require('./lib/pushgateway');\n\nexports.linearBuckets = require('./lib/bucketGenerators').linearBuckets;\nexports.exponentialBuckets = require('./lib/bucketGenerators').exponentialBuckets;\n\nvar defaultMetrics = require('./lib/defaultMetrics');\n\ndefaultMetrics();\n\nexports.defaultMetrics = defaultMetrics;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/register.js":"'use strict';\n\nvar metrics = {};\n\nfunction getMetricsAsArray() {\n\treturn Object.keys(metrics)\n\t\t.map(function(key) {\n\t\t\treturn metrics[key];\n\t\t});\n}\n\nfunction getMetricAsPrometheusString(metric) {\n\tvar item = metric.get();\n\tvar name = escapeString(item.name);\n\tvar help = escapeString(item.help);\n\thelp = ['#', 'HELP', name, help].join(' ');\n\tvar type = ['#', 'TYPE', name, item.type].join(' ');\n\n\tvar values = (item.values || []).reduce(function(valAcc, val) {\n\t\tvar labels = Object.keys(val.labels || {}).map(function(key) {\n\t\t\treturn key + '=\"' + escapeLabelValue(val.labels[key]) + '\"';\n\t\t});\n\n\t\tvar metricName = val.metricName || item.name;\n\t\tif(labels.length) {\n\t\t\tmetricName += '{' + labels.join(',') + '}';\n\t\t}\n\n\t\tvalAcc += [metricName, val.value].join(' ');\n\t\tvalAcc += '\\n';\n\t\treturn valAcc;\n\t}, '');\n\n\tvar acc = [help, type, values].join('\\n');\n\treturn acc;\n}\n\nvar getMetrics = function getMetrics() {\n\treturn getMetricsAsArray()\n\t\t.map(getMetricAsPrometheusString)\n\t\t.join('\\n');\n};\n\nfunction escapeString(str) {\n\treturn str.replace(/\\n/g, '\\\\n').replace(/\\\\(?!n)/g, '\\\\\\\\');\n}\nfunction escapeLabelValue(str) {\n\tif(typeof str !== 'string') {\n\t\treturn str;\n\t}\n\treturn escapeString(str).replace(/\"/g, '\\\\\"');\n}\n\nvar registerMetric = function registerMetric(metricFn) {\n\tif(metrics[metricFn.name]) {\n\t\tthrow new Error('A metric with the name ' + metricFn.name + ' has already been registered.');\n\t}\n\n\tmetrics[metricFn.name] = metricFn;\n};\n\nvar clearMetrics = function clearMetrics() {\n\tmetrics = {};\n};\n\nvar getMetricsAsJSON = function getMetricsAsJSON() {\n\treturn getMetricsAsArray().map(function(metric) {\n\t\treturn metric.get();\n\t});\n};\n\nvar removeSingleMetric = function removeSingleMetric(name) {\n\tdelete metrics[name];\n};\n\nvar getSingleMetricAsString = function getSingleMetricAsString(name) {\n\treturn getMetricAsPrometheusString(metrics[name]);\n};\n\nvar getSingleMetric = function getSingleMetric(name) {\n\treturn metrics[name];\n};\n\nmodule.exports = {\n\tregisterMetric: registerMetric,\n\tmetrics: getMetrics,\n\tclear: clearMetrics,\n\tgetMetricsAsJSON: getMetricsAsJSON,\n\tremoveSingleMetric: removeSingleMetric,\n\tgetSingleMetric: getSingleMetric,\n\tgetSingleMetricAsString: getSingleMetricAsString,\n\tcontentType: 'text/plain; version=0.0.4; charset=utf-8'\n};\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/counter.js":"/**\n * Counter metric\n */\n'use strict';\nvar register = require('./register');\nvar type = 'counter';\nvar isNumber = require('./util').isNumber;\nvar getProperties = require('./util').getPropertiesFromObj;\nvar hashObject = require('./util').hashObject;\nvar validateLabels = require('./validation').validateLabel;\nvar validateMetricName = require('./validation').validateMetricName;\nvar validateLabelNames = require('./validation').validateLabelName;\n\nvar getLabels = require('./util').getLabels;\n\n/**\n * Counter\n * @param {string} name - Name of the metric\n * @param {string} help - Help description for the metric\n * @param {Array.<string>} labels - Labels\n * @constructor\n */\nfunction Counter(name, help, labels) {\n\tif(!help) {\n\t\tthrow new Error('Missing mandatory help parameter');\n\t}\n\tif(!name) {\n\t\tthrow new Error('Missing mandatory name parameter');\n\t}\n\tif(!validateMetricName(name)) {\n\t\tthrow new Error('Invalid metric name');\n\t}\n\n\tif(!validateLabelNames(labels)) {\n\t\tthrow new Error('Invalid label name');\n\t}\n\tthis.name = name;\n\tthis.hashMap = {};\n\n\tthis.labelNames = (labels || []);\n\n\tthis.help = help;\n\tregister.registerMetric(this);\n}\n\n/**\n * Increment counter\n * @param {object} labels - What label you want to be incremented\n * @param {Number} value - Value to increment, if omitted increment with 1\n * @returns {void}\n */\nCounter.prototype.inc = function(labels, value) {\n\tif(isNumber(labels) || !labels) {\n\t\treturn inc.call(this, null)(labels);\n\t}\n\n\tvar hash = hashObject(labels);\n\treturn inc.call(this, labels, hash)(value);\n};\n\nCounter.prototype.get = function() {\n\treturn {\n\t\thelp: this.help,\n\t\tname: this.name,\n\t\ttype: type,\n\t\tvalues: getProperties(this.hashMap)\n\t};\n};\n\nCounter.prototype.labels = function() {\n\tvar labels = getLabels(this.labelNames, arguments) || {};\n\tvar hash = hashObject(labels);\n\tvalidateLabels(this.labelNames, labels);\n\treturn {\n\t\tinc: inc.call(this, labels, hash)\n\t};\n};\n\nvar inc = function(labels, hash) {\n\tvar that = this;\n\treturn function(value) {\n\t\tif(value && !isNumber(value)) {\n\t\t\tthrow new Error('Value is not a valid number', value);\n\t\t}\n\t\tif(value < 0) {\n\t\t\tthrow new Error('It is not possible to decrease a counter');\n\t\t}\n\n\t\tvar incValue = value === null || value === undefined ? 1 : value;\n\n\t\tthat.hashMap = createValue(that.hashMap, incValue, labels, hash);\n\t};\n};\n\nfunction createValue(hashMap, value, labels, hash) {\n\tif(hashMap[hash]) {\n\t\thashMap[hash].value += value;\n\t} else {\n\t\thashMap[hash] = { value: value, labels: labels || {} };\n\t}\n\treturn hashMap;\n};\n\nmodule.exports = Counter;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/util.js":"'use strict';\n\nexports.isNumber = isNumber;\n\nexports.getPropertiesFromObj = function(hashMap) {\n\tvar obj = Object.keys(hashMap).map(function(x) {\n\t\treturn hashMap[x];\n\t});\n\treturn obj;\n};\n\n\nexports.setValue = function setValue(hashMap, value, labels) {\n\tvar hash = hashObject(labels);\n\thashMap[hash] = { value: isNumber(value) ? value : 0, labels: labels || {} };\n\treturn hashMap;\n};\n\nexports.getLabels = function(labelNames, args) {\n\tif(labelNames.length !== args.length) {\n\t\tthrow new Error('Invalid number of arguments');\n\t}\n\n\tvar argsAsArray = Array.prototype.slice.call(args);\n\treturn labelNames.reduce(function(acc, label, index) {\n\t\tacc[label] = argsAsArray[index];\n\t\treturn acc;\n\t}, {});\n};\n\n\nfunction hashObject(labels) {\n\t// We don't actually need a hash here. We just need a string that\n\t// is unique for each possible labels object and consistent across\n\t// calls with equivalent labels objects.\n\tvar keys = Object.keys(labels);\n\tif(keys.length === 0) {\n\t\treturn '';\n\t}\n\t// else\n\tif(keys.length > 1) {\n\t\tkeys = keys.sort();\t\t// need consistency across calls\n\t}\n\n\tvar elems = [];\n\tfor(var i = 0; i < keys.length; i++) {\n\t\telems.push(keys[i] + ':' + labels[keys[i]]);\n\t}\n\treturn elems.join(',');\n}\nexports.hashObject = hashObject;\n\nfunction isNumber(obj) {\n\treturn !isNaN(parseFloat(obj));\n}\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/validation.js":"'use strict';\n\nexports.validateMetricName = function(name) {\n\tvar regexp = new RegExp('^[a-zA-Z_:][a-zA-Z0-9_:]*$');\n\treturn regexp.test(name);\n};\n\nexports.validateLabelName = function(names) {\n\tvar valid = true;\n\tvar regexp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');\n\t(names || []).forEach(function(name) {\n\t\tif(!regexp.test(name)) {\n\t\t\tvalid = false;\n\t\t}\n\t});\n\treturn valid;\n};\n\nexports.validateLabel = function validateLabel(savedLabels, labels) {\n\tObject.keys(labels).forEach(function(label) {\n\t\tif(savedLabels.indexOf(label) === -1) {\n\t\t\tthrow new Error('Added label is not included in initial labelset');\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/gauge.js":"/**\n * Gauge metric\n */\n'use strict';\n\nvar register = require('./register');\nvar type = 'gauge';\n\nvar isNumber = require('./util').isNumber;\nvar extend = require('util-extend');\nvar createValue = require('./util').setValue;\nvar getProperties = require('./util').getPropertiesFromObj;\nvar getLabels = require('./util').getLabels;\nvar hashObject = require('./util').hashObject;\nvar validateMetricName = require('./validation').validateMetricName;\nvar validateLabels = require('./validation').validateLabel;\nvar validateLabelNames = require('./validation').validateLabelName;\n\n/**\n * Gauge constructor\n * @param {string} name - Name of the metric\n * @param {string} help - Help for the metric\n * @param {Array.<string>} labels - Array with strings, all label keywords supported\n * @constructor\n */\nfunction Gauge(name, help, labels) {\n\tif(!help) {\n\t\tthrow new Error('Missing mandatory help parameter');\n\t}\n\tif(!name) {\n\t\tthrow new Error('Missing mandatory name parameter');\n\t}\n\tif(!validateMetricName(name)) {\n\t\tthrow new Error('Invalid metric name');\n\t}\n\tif(!validateLabelNames(labels)) {\n\t\tthrow new Error('Invalid label name');\n\t}\n\n\tthis.name = name;\n\tthis.labelNames = labels || [];\n\tthis.hashMap = {};\n\n\tthis.help = help;\n\tregister.registerMetric(this);\n}\n\n/**\n * Set a gauge to a value\n * @param {object} labels - Object with labels and their values\n * @param {Number} value - Value to set the gauge to, must be positive\n * @returns {void}\n */\nGauge.prototype.set = function(labels, value) {\n\tif(isNumber(labels)) {\n\t\treturn set.call(this, null)(labels);\n\t}\n\treturn set.call(this, labels)(value);\n};\n\n/**\n * Increment a gauge value\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @param {Number} value - Value to increment - if omitted, increment with 1\n * @returns {void}\n */\nGauge.prototype.inc = function(labels, value) {\n\tinc.call(this, labels)(value);\n};\n\n\n/**\n * Decrement a gauge value\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @param {Number} value - Value to decrement - if omitted, decrement with 1\n * @returns {void}\n */\nGauge.prototype.dec = function(labels, value) {\n\tdec.call(this, labels)(value);\n};\n\n/**\n * Set the gauge to current unix epoch\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @returns {void}\n */\nGauge.prototype.setToCurrentTime = function(labels) {\n\treturn setToCurrentTime.call(this, labels)();\n};\n\n/**\n * Start a timer\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @returns {function} - Invoke this function to set the duration in seconds since you started the timer.\n * @example\n * var done = gauge.startTimer();\n * makeXHRRequest(function(err, response) {\n *\tdone(); //Duration of the request will be saved\n * });\n */\nGauge.prototype.startTimer = function(labels) {\n\treturn startTimer.call(this, labels)();\n};\n\nGauge.prototype.get = function() {\n\treturn {\n\t\thelp: this.help,\n\t\tname: this.name,\n\t\ttype: type,\n\t\tvalues: getProperties(this.hashMap)\n\t};\n};\n\nGauge.prototype._getValue = function(labels) {\n\tvar hash = hashObject(labels || {});\n\treturn this.hashMap[hash] ? this.hashMap[hash].value : 0;\n};\n\nGauge.prototype.labels = function() {\n\tvar labels = getLabels(this.labelNames, arguments);\n\treturn {\n\t\tinc: inc.call(this, labels),\n\t\tdec: dec.call(this, labels),\n\t\tset: set.call(this, labels),\n\t\tsetToCurrentTime: setToCurrentTime.call(this, labels),\n\t\tstartTimer: startTimer.call(this, labels)\n\t};\n};\n\nfunction setToCurrentTime(labels) {\n\tvar gauge = this;\n\treturn function() {\n\t\tgauge.set(labels, new Date().getTime());\n\t};\n}\n\nfunction startTimer(startLabels) {\n\tvar gauge = this;\n\treturn function() {\n\t\tvar start = process.hrtime();\n\t\treturn function(endLabels) {\n\t\t\tvar delta = process.hrtime(start);\n\t\t\tgauge.set(extend(startLabels || {}, endLabels), delta[0] + delta[1] / 1e9);\n\t\t};\n\t};\n}\n\nfunction dec(labels) {\n\tvar gauge = this;\n\treturn function(value) {\n\t\tvar data = convertLabelsAndValues(labels, value);\n\t\tgauge.set(data.labels, gauge._getValue(data.labels) - (data.value || 1));\n\t};\n}\n\nfunction inc(labels) {\n\tvar gauge = this;\n\treturn function(value) {\n\t\tvar data = convertLabelsAndValues(labels, value);\n\t\tgauge.set(data.labels, gauge._getValue(data.labels) + (data.value || 1));\n\t};\n}\n\nfunction set(labels) {\n\tvar that = this;\n\treturn function(value) {\n\t\tif(!isNumber(value)) {\n\t\t\tthrow new Error('Value is not a valid number', value);\n\t\t}\n\n\t\tlabels = labels || {};\n\n\t\tvalidateLabels(that.labelNames, labels);\n\t\tthat.hashMap = createValue(that.hashMap, value, labels);\n\t};\n}\n\nfunction convertLabelsAndValues(labels, value) {\n\tif(isNumber(labels)) {\n\t\treturn {\n\t\t\tvalue: labels,\n\t\t\tlabels: {}\n\t\t};\n\t}\n\treturn {\n\t\tlabels: labels,\n\t\tvalue: value\n\t};\n}\n\n\nmodule.exports = Gauge;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/histogram.js":"/**\n * Histogram\n */\n'use strict';\n\nvar register = require('./register');\nvar type = 'histogram';\nvar isNumber = require('./util').isNumber;\nvar extend = require('util-extend');\nvar getProperties = require('./util').getPropertiesFromObj;\nvar getLabels = require('./util').getLabels;\nvar hashObject = require('./util').hashObject;\nvar validateLabels = require('./validation').validateLabel;\nvar validateMetricName = require('./validation').validateMetricName;\nvar validateLabelNames = require('./validation').validateLabelName;\n\n/**\n * Histogram\n * @param {string} name - Name of the metric\n * @param {string} help - Help for the metric\n * @param {object|Array.<string>} labelsOrConf - Either array of label names or config object as a key-value object\n * @param {object} conf - Configuration object\n * @constructor\n */\nfunction Histogram(name, help, labelsOrConf, conf) {\n\tvar obj;\n\tvar labels = [];\n\n\tif(Array.isArray(labelsOrConf)) {\n\t\tobj = conf || {};\n\t\tlabels = labelsOrConf;\n\t} else {\n\t\tobj = labelsOrConf || {};\n\t}\n\n\tvalidateInput(name, help, labels);\n\n\tthis.name = name;\n\tthis.help = help;\n\n\tthis.upperBounds = configureUpperbounds(obj.buckets);\n\tthis.bucketValues = this.upperBounds.reduce(function(acc, upperBound) {\n\t\tacc[upperBound] = 0;\n\t\treturn acc;\n\t}, {});\n\n\tObject.freeze(this.bucketValues);\n\tObject.freeze(this.upperBounds);\n\tthis.sum = 0;\n\tthis.count = 0;\n\n\tthis.hashMap = {};\n\tthis.labelNames = labels || [];\n\tregister.registerMetric(this);\n}\n\n/**\n * Observe a value in histogram\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @param {Number} value - Value to observe in the histogram\n * @returns {void}\n */\nHistogram.prototype.observe = function(labels, value) {\n\tobserve.call(this, labels === 0 ? 0 : (labels || {}))(value);\n};\n\nHistogram.prototype.get = function() {\n\tvar data = getProperties(this.hashMap);\n\tvar values =\n\t\tdata.map(extractBucketValuesForExport(this))\n\t\t\t.reduce(addSumAndCountForExport(this), []);\n\n\treturn {\n\t\tname: this.name,\n\t\thelp: this.help,\n\t\ttype: type,\n\t\tvalues: values\n\t};\n};\n\nHistogram.prototype.reset = function() {\n\tthis.sum = 0;\n\tthis.count = 0;\n\tthis.hashMap = {};\n};\n\n/**\n * Start a timer that could be used to logging durations\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @returns {function} - Function to invoke when you want to stop the timer and observe the duration in seconds\n * @example\n * var end = histogram.startTimer();\n * makeExpensiveXHRRequest(function(err, res) {\n *\tend(); //Observe the duration of expensiveXHRRequest\n * });\n */\nHistogram.prototype.startTimer = function(labels) {\n\treturn startTimer.call(this, labels)();\n};\n\nHistogram.prototype.labels = function() {\n\tvar labels = getLabels(this.labelNames, arguments);\n\treturn {\n\t\tobserve: observe.call(this, labels),\n\t\tstartTimer: startTimer.call(this, labels)\n\t};\n};\n\nfunction startTimer(startLabels) {\n\tvar histogram = this;\n\treturn function() {\n\t\tvar start = process.hrtime();\n\t\treturn function(endLabels) {\n\t\t\tvar delta = process.hrtime(start);\n\t\t\thistogram.observe(extend(startLabels || {}, endLabels),  delta[0] + delta[1] / 1e9);\n\t\t};\n\t};\n}\nfunction validateInput(name, help, labels) {\n\tif(!help) {\n\t\tthrow new Error('Missing mandatory help parameter');\n\t}\n\tif(!name) {\n\t\tthrow new Error('Missing mandatory name parameter');\n\t}\n\n\tif(!validateMetricName(name)) {\n\t\tthrow new Error('Invalid metric name');\n\t}\n\n\tif(!validateLabelNames(labels)) {\n\t\tthrow new Error('Invalid label name');\n\t}\n\n\tlabels.forEach(function(label) {\n\t\tif(label === 'le') {\n\t\t\tthrow new Error('le is a reserved label keyword');\n\t\t}\n\t});\n}\n\nfunction configureUpperbounds(configuredBuckets) {\n\tvar defaultBuckets = [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10];\n\treturn [].concat((configuredBuckets || defaultBuckets)).sort(sortAscending);\n}\n\nfunction sortAscending(x, y) {\n\treturn x - y;\n}\n\nfunction createValuePair(labels, value, metricName) {\n\treturn {\n\t\tlabels: labels,\n\t\tvalue: value,\n\t\tmetricName: metricName\n\t};\n}\n\nfunction findBound(upperBounds, value) {\n\tfor(var i = 0; i < upperBounds.length; i++) {\n\t\tvar bound = upperBounds[i];\n\t\tif(value <= bound) {\n\t\t\treturn bound;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\nfunction observe(labels) {\n\tvar histogram = this;\n\treturn function(value) {\n\t\tvar labelValuePair = convertLabelsAndValues(labels, value);\n\n\t\tvalidateLabels(histogram.labelNames, labelValuePair.labels);\n\t\tif(!isNumber(labelValuePair.value)) {\n\t\t\tthrow new Error('Value is not a valid number', labelValuePair.value);\n\t\t}\n\n\t\tvar hash = hashObject(labelValuePair.labels);\n\t\tvar valueFromMap = histogram.hashMap[hash];\n\t\tif(!valueFromMap) {\n\t\t\tvalueFromMap = createBaseValues(labelValuePair.labels, extend({}, histogram.bucketValues));\n\t\t}\n\n\t\tvar b = findBound(histogram.upperBounds, labelValuePair.value);\n\n\t\tvalueFromMap.sum += labelValuePair.value;\n\t\tvalueFromMap.count += 1;\n\n\t\tif(valueFromMap.bucketValues.hasOwnProperty(b)) {\n\t\t\tvalueFromMap.bucketValues[b] += 1;\n\t\t}\n\n\t\thistogram.hashMap[hash] = valueFromMap;\n\t};\n}\n\nfunction createBaseValues(labels, bucketValues) {\n\treturn {\n\t\tlabels: labels,\n\t\tbucketValues: bucketValues,\n\t\tsum: 0,\n\t\tcount: 0\n\t};\n}\n\nfunction convertLabelsAndValues(labels, value) {\n\tif(isNumber(labels)) {\n\t\treturn {\n\t\t\tvalue: labels,\n\t\t\tlabels: {}\n\t\t};\n\t}\n\treturn {\n\t\tlabels: labels,\n\t\tvalue: value\n\t};\n}\n\nfunction extractBucketValuesForExport(histogram) {\n\treturn function(bucketData) {\n\t\tvar buckets = histogram.upperBounds.map(createBucketValues(bucketData, histogram));\n\t\treturn { buckets: buckets, data: bucketData };\n\t};\n}\n\nfunction addSumAndCountForExport(histogram) {\n\treturn function(acc, d) {\n\t\tacc = acc.concat(d.buckets);\n\n\t\tvar infLabel = extend({ le: '+Inf' }, d.data.labels);\n\t\tacc.push(createValuePair(infLabel, d.data.count, histogram.name + '_bucket'));\n\t\tacc.push(createValuePair(d.data.labels, d.data.sum, histogram.name + '_sum'));\n\t\tacc.push(createValuePair(d.data.labels, d.data.count, histogram.name + '_count'));\n\t\treturn acc;\n\t};\n}\n\nfunction createBucketValues(bucket, histogram) {\n\tvar acc = 0;\n\treturn function(upperBound) {\n\t\tacc += bucket.bucketValues[upperBound];\n\t\tvar lbls = extend({ le: upperBound }, bucket.labels);\n\t\tvar valuePair = createValuePair(lbls, acc, histogram.name + '_bucket');\n\t\treturn valuePair;\n\t};\n}\n\nmodule.exports = Histogram;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/summary.js":"/**\n * Summary\n */\n'use strict';\n\nvar register = require('./register');\nvar type = 'summary';\nvar isNumber = require('./util').isNumber;\nvar extend = require('util-extend');\nvar getProperties = require('./util').getPropertiesFromObj;\nvar getLabels = require('./util').getLabels;\nvar hashObject = require('./util').hashObject;\nvar validateLabels = require('./validation').validateLabel;\nvar validateMetricName = require('./validation').validateMetricName;\nvar validateLabelNames = require('./validation').validateLabelName;\nvar TDigest = require('tdigest').TDigest;\n\n/**\n * Summary\n * @param {string} name - Name of the metric\n * @param {string} help - Help for the metric\n * @param {object|Array.<string>} labelsOrConf - Either array of label names or config object as a key-value object\n * @param {object} conf - Configuration object\n * @constructor\n */\nfunction Summary(name, help, labelsOrConf, conf) {\n\tvar obj;\n\tvar labels = [];\n\n\tif(Array.isArray(labelsOrConf)) {\n\t\tobj = conf || {};\n\t\tlabels = labelsOrConf;\n\t} else {\n\t\tobj = labelsOrConf || {};\n\t}\n\n\tvalidateInput(name, help, labels);\n\n\tthis.name = name;\n\tthis.help = help;\n\n\tthis.percentiles = configurePercentiles(obj.percentiles);\n\tthis.hashMap = {};\n\tthis.labelNames = labels || [];\n\tregister.registerMetric(this);\n}\n\n/**\n * Observe a value\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @param {Number} value - Value to observe\n * @returns {void}\n */\nSummary.prototype.observe = function(labels, value) {\n\tobserve.call(this, labels === 0 ? 0 : (labels || {}))(value);\n};\n\nSummary.prototype.get = function() {\n\tvar summary = this;\n\tvar data = getProperties(summary.hashMap);\n\tvar values = [];\n\tdata.forEach(function(s) {\n\t\textractSummariesForExport(s, summary.percentiles).forEach(function(v) {\n\t\t\tvalues.push(v);\n\t\t});\n\t\tvalues.push(getSumForExport(s, summary));\n\t\tvalues.push(getCountForExport(s, summary));\n\t});\n\n\treturn {\n\t\tname: this.name,\n\t\thelp: this.help,\n\t\ttype: type,\n\t\tvalues: values\n\t};\n};\n\nSummary.prototype.reset = function() {\n\tvar data = getProperties(this.hashMap);\n\tdata.forEach(function(s) {\n\t\ts.td.reset();\n\t\ts.count = 0;\n\t\ts.sum = 0;\n\t});\n};\n\nfunction extractSummariesForExport(summaryOfLabels, percentiles) {\n\tsummaryOfLabels.td.compress();\n\n\treturn percentiles.map(function(percentile) {\n\t\tvar percentileValue = summaryOfLabels.td.percentile(percentile);\n\t\treturn {\n\t\t\tlabels: extend({ quantile: percentile }, summaryOfLabels.labels),\n\t\t\tvalue: percentileValue ? percentileValue : 0\n\t\t};\n\t});\n}\n\nfunction getCountForExport(value, summary) {\n\treturn {\n\t\tmetricName: summary.name + '_count',\n\t\tlabels: value.labels,\n\t\tvalue: value.count\n\t};\n}\n\nfunction getSumForExport(value, summary) {\n\treturn {\n\t\tmetricName: summary.name + '_sum',\n\t\tlabels: value.labels,\n\t\tvalue: value.sum\n\t};\n}\n\n\n/**\n * Start a timer that could be used to logging durations\n * @param {object} labels - Object with labels where key is the label key and value is label value. Can only be one level deep\n * @returns {function} - Function to invoke when you want to stop the timer and observe the duration in seconds\n * @example\n * var end = summary.startTimer();\n * makeExpensiveXHRRequest(function(err, res) {\n *\tend(); //Observe the duration of expensiveXHRRequest\n * });\n */\nSummary.prototype.startTimer = function(labels) {\n\treturn startTimer.call(this, labels)();\n};\n\nSummary.prototype.labels = function() {\n\tvar labels = getLabels(this.labelNames, arguments);\n\treturn {\n\t\tobserve: observe.call(this, labels),\n\t\tstartTimer: startTimer.call(this, labels)\n\t};\n};\n\nfunction startTimer(startLabels) {\n\tvar summary = this;\n\treturn function() {\n\t\tvar start = process.hrtime();\n\t\treturn function(endLabels) {\n\t\t\tvar delta = process.hrtime(start);\n\t\t\tsummary.observe(extend(startLabels || {}, endLabels),  delta[0] + delta[1] / 1e9);\n\t\t};\n\t};\n}\n\nfunction validateInput(name, help, labels) {\n\tif(!help) {\n\t\tthrow new Error('Missing mandatory help parameter');\n\t}\n\tif(!name) {\n\t\tthrow new Error('Missing mandatory name parameter');\n\t}\n\n\tif(!validateMetricName(name)) {\n\t\tthrow new Error('Invalid metric name');\n\t}\n\n\tif(!validateLabelNames(labels)) {\n\t\tthrow new Error('Invalid label name');\n\t}\n\n\tlabels.forEach(function(label) {\n\t\tif(label === 'quantile') {\n\t\t\tthrow new Error('quantile is a reserved label keyword');\n\t\t}\n\t});\n}\n\nfunction configurePercentiles(configuredPercentiles) {\n\tvar defaultPercentiles = [0.01, 0.05, 0.5, 0.9, 0.95, 0.99, 0.999];\n\treturn [].concat((configuredPercentiles || defaultPercentiles)).sort(sortAscending);\n}\n\nfunction sortAscending(x, y) {\n\treturn x - y;\n}\n\nfunction createValuePair(labels, value, metricName) {\n\treturn {\n\t\tlabels: labels,\n\t\tvalue: value,\n\t\tmetricName: metricName\n\t};\n}\n\nfunction findBound(upperBounds, value) {\n\tfor(var i = 0; i < upperBounds.length; i++) {\n\t\tvar bound = upperBounds[i];\n\t\tif(value <= bound) {\n\t\t\treturn bound;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\nfunction observe(labels) {\n\tvar summary = this;\n\treturn function(value) {\n\t\tvar labelValuePair = convertLabelsAndValues(labels, value);\n\n\t\tvalidateLabels(summary.labelNames, summary.labels);\n\t\tif(!isNumber(labelValuePair.value)) {\n\t\t\tthrow new Error('Value is not a valid number', labelValuePair.value);\n\t\t}\n\n\t\tvar hash = hashObject(labelValuePair.labels);\n\t\tvar summaryOfLabel = summary.hashMap[hash];\n\t\tif(!summaryOfLabel) {\n\t\t\tsummaryOfLabel = {\n\t\t\t\tlabels: labelValuePair.labels,\n\t\t\t\ttd: new TDigest(),\n\t\t\t\tcount: 0,\n\t\t\t\tsum: 0\n\t\t\t};\n\t\t}\n\n\t\tsummaryOfLabel.td.push(labelValuePair.value);\n\t\tsummaryOfLabel.count++;\n\t\tsummaryOfLabel.sum += labelValuePair.value;\n\t\tsummary.hashMap[hash] = summaryOfLabel;\n\t};\n}\n\nfunction convertLabelsAndValues(labels, value) {\n\tif(isNumber(labels)) {\n\t\treturn {\n\t\t\tvalue: labels,\n\t\t\tlabels: {}\n\t\t};\n\t}\n\treturn {\n\t\tlabels: labels,\n\t\tvalue: value\n\t};\n}\n\nmodule.exports = Summary;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/pushgateway.js":"'use strict';\n\nvar url = require('url');\nvar http = require('http');\nvar https = require('https');\nvar register = require('./register');\n\nfunction Pushgateway(gatewayUrl, options) {\n\tthis.gatewayUrl = gatewayUrl;\n\tthis.requestOptions = Object.assign({}, options);\n}\n\nPushgateway.prototype.pushAdd = function(params, callback) {\n\tif(!params || !params.jobName) {\n\t\tthrow new Error('Missing jobName parameter');\n\t}\n\n\tuseGateway.call(this, 'POST', params.jobName, params.groupings, callback);\n};\nPushgateway.prototype.push = function(params, callback) {\n\tif(!params || !params.jobName) {\n\t\tthrow new Error('Missing jobName parameter');\n\t}\n\n\tuseGateway.call(this, 'PUT', params.jobName, params.groupings, callback);\n};\nPushgateway.prototype.delete = function(params, callback) {\n\tif(!params || !params.jobName) {\n\t\tthrow new Error('Missing jobName parameter');\n\t}\n\n\tuseGateway.call(this, 'DELETE', params.jobName, params.groupings, callback);\n};\n\n\nfunction useGateway(method, job, groupings, callback) {\n\tvar path = ['metrics/job/', encodeURIComponent(job), generateGroupings(groupings)].join('');\n\n\tvar target = url.resolve(this.gatewayUrl, path);\n\tvar requestParams = url.parse(target);\n\tvar httpModule = isHttps(requestParams.href) ? https : http;\n\tvar options = Object.assign(requestParams, this.requestOptions, {\n\t\tmethod: method\n\t});\n\n\tvar req = httpModule.request(options, function(res) {\n\t\tvar body = '';\n\t\tres.setEncoding('utf8');\n\t\tres.on('data', function(chunk) {\n\t\t\tbody += chunk;\n\t\t});\n\t\tres.on('end', function() {\n\t\t\tcallback(null, res, body);\n\t\t});\n\t});\n\treq.on('error', function(err) {\n\t\tcallback(err);\n\t});\n\n\tif(method !== 'DELETE') {\n\t\treq.write(register.metrics());\n\t}\n\treq.end();\n}\n\nfunction generateGroupings(groupings) {\n\tif(!groupings) {\n\t\treturn '';\n\t}\n\treturn Object.keys(groupings).map(function(key) {\n\t\treturn ['/', encodeURIComponent(key), '/', encodeURIComponent(groupings[key])].join('');\n\t}).join('');\n}\n\nfunction isHttps(href) {\n\treturn href.search(/^https/) !== -1;\n}\n\nmodule.exports = Pushgateway;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/bucketGenerators.js":"'use strict';\n\nexports.linearBuckets = function(start, width, count) {\n\tif(count < 1) {\n\t\tthrow new Error('Linear buckets needs a positive count');\n\t}\n\n\tvar buckets = new Array(count);\n\tfor(var i = 0; i < count; i++) {\n\t\tbuckets[i] = start;\n\t\tstart += width;\n\t}\n\treturn buckets;\n};\n\nexports.exponentialBuckets = function(start, factor, count) {\n\tif(start <= 0) {\n\t\tthrow new Error('Exponential buckets needs a positive start');\n\t}\n\tif(count < 1) {\n\t\tthrow new Error('Exponential buckets needs a positive count');\n\t}\n\tif(factor <= 1) {\n\t\tthrow new Error('Exponential buckets needs a factor greater than 1');\n\t}\n\tvar buckets = new Array(count);\n\tfor(var i = 0; i < count; i++) {\n\t\tbuckets[i] = start;\n\t\tstart *= factor;\n\t}\n\treturn buckets;\n};\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/defaultMetrics.js":"'use strict';\n\nvar processCpuTotal = require('./metrics/processCpuTotal');\nvar processStartTime = require('./metrics/processStartTime');\nvar osMemoryHeap = require('./metrics/osMemoryHeap');\nvar processOpenFileDescriptors = require('./metrics/processOpenFileDescriptors');\nvar processMaxFileDescriptors = require('./metrics/processMaxFileDescriptors');\nvar eventLoopLag = require('./metrics/eventLoopLag');\nvar processHandles = require('./metrics/processHandles');\nvar processRequests = require('./metrics/processRequests');\nvar heapSizeAndUsed = require('./metrics/heapSizeAndUsed');\nvar heapSpacesSizeAndUsed = require('./metrics/heapSpacesSizeAndUsed');\nvar version = require('./metrics/version');\nvar register = require('./register');\n\nvar metrics = {\n\tprocessCpuTotal: processCpuTotal,\n\tprocessStartTime: processStartTime,\n\tosMemoryHeap: osMemoryHeap,\n\tprocessOpenFileDescriptors: processOpenFileDescriptors,\n\tprocessMaxFileDescriptors: processMaxFileDescriptors,\n\teventLoopLag: eventLoopLag,\n\tprocessHandles: processHandles,\n\tprocessRequests: processRequests,\n\theapSizeAndUsed: heapSizeAndUsed,\n\theapSpacesSizeAndUsed: heapSpacesSizeAndUsed,\n\tversion: version\n};\n\nvar existingInterval = null;\n// This is used to ensure the program throws on duplicate metrics during first run\n// We might want to consider not supporting running the default metrics function more than once\nvar init = true;\n\nmodule.exports = function startDefaultMetrics(disabledMetrics, interval) {\n\tif(existingInterval !== null) {\n\t\tclearInterval(existingInterval);\n\t}\n\n\tdisabledMetrics = disabledMetrics || [];\n\tinterval = interval || 10000;\n\n\tvar metricsInUse = Object.keys(metrics)\n\t\t.filter(function(metric) {\n\t\t\treturn disabledMetrics.indexOf(metric) < 0;\n\t\t})\n\t\t.map(function(metric) {\n\t\t\tvar defaultMetric = metrics[metric];\n\t\t\tif(!init) {\n\t\t\t\tdefaultMetric.metricNames.forEach(register.removeSingleMetric);\n\t\t\t}\n\n\t\t\treturn defaultMetric();\n\t\t});\n\n\tfunction updateAllMetrics() {\n\t\tmetricsInUse.forEach(function(metric) {\n\t\t\tmetric.call();\n\t\t});\n\t}\n\n\tupdateAllMetrics();\n\n\texistingInterval = setInterval(updateAllMetrics, interval).unref();\n\n\tinit = false;\n\n\treturn existingInterval;\n};\n\nmodule.exports.metricsList = Object.keys(metrics);\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/processCpuTotal.js":"'use strict';\n\nvar Counter = require('../counter');\nvar PROCESS_CPU_USER_SECONDS = 'process_cpu_user_seconds_total';\nvar PROCESS_CPU_SYSTEM_SECONDS = 'process_cpu_system_seconds_total';\nvar PROCESS_CPU_SECONDS = 'process_cpu_seconds_total';\n\nmodule.exports = function() {\n\t// Don't do anything if the function doesn't exist (introduced in node@6.1.0)\n\tif(typeof process.cpuUsage !== 'function') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar cpuUserUsageCounter = new Counter(PROCESS_CPU_USER_SECONDS,\n\t\t'Total user CPU time spent in seconds.');\n\tvar cpuSystemUsageCounter = new Counter(PROCESS_CPU_SYSTEM_SECONDS,\n\t\t'Total system CPU time spent in seconds.');\n\tvar cpuUsageCounter = new Counter(PROCESS_CPU_SECONDS,\n\t\t'Total user and system CPU time spent in seconds.');\n\n\tvar lastCpuUsage = process.cpuUsage();\n\n\treturn function() {\n\t\tvar cpuUsage = process.cpuUsage();\n\n\t\tvar userUsageMicros = cpuUsage.user - lastCpuUsage.user;\n\t\tvar systemUsageMicros = cpuUsage.system - lastCpuUsage.system;\n\n\t\tlastCpuUsage = cpuUsage;\n\n\t\tcpuUserUsageCounter.inc(userUsageMicros / 1e6);\n\t\tcpuSystemUsageCounter.inc(systemUsageMicros / 1e6);\n\t\tcpuUsageCounter.inc((userUsageMicros + systemUsageMicros) / 1e6);\n\t};\n};\n\nmodule.exports.metricNames = [\n\tPROCESS_CPU_USER_SECONDS, PROCESS_CPU_SYSTEM_SECONDS, PROCESS_CPU_SECONDS\n];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/processStartTime.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar nowInSeconds = Math.round(Date.now() / 1000 - process.uptime());\n\nvar PROCESS_START_TIME = 'process_start_time_seconds';\n\nmodule.exports = function() {\n\tvar cpuUserGauge = new Gauge(PROCESS_START_TIME, 'Start time of the process since unix epoch in seconds.');\n\tvar isSet = false;\n\n\treturn function() {\n\t\tif(isSet) {\n\t\t\treturn;\n\t\t}\n\t\tcpuUserGauge.set(null, nowInSeconds);\n\t\tisSet = true;\n\t};\n};\n\nmodule.exports.metricNames = [PROCESS_START_TIME];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/osMemoryHeap.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar linuxVariant = require('./osMemoryHeapLinux');\nvar safeMemoryUsage = require('./helpers/safeMemoryUsage');\n\nvar PROCESS_RESIDENT_MEMORY = 'process_resident_memory_bytes';\n\nvar notLinuxVariant = function() {\n\tvar residentMemGauge = new Gauge(PROCESS_RESIDENT_MEMORY, 'Resident memory size in bytes.');\n\n\treturn function() {\n\t\tvar memUsage = safeMemoryUsage();\n\n\t\t// I don't think the other things returned from `process.memoryUsage()` is relevant to a standard export\n\t\tif(memUsage) {\n\t\t\tresidentMemGauge.set(null, memUsage.rss);\n\t\t}\n\t};\n};\n\nmodule.exports = function() {\n\treturn process.platform === 'linux' ? linuxVariant() : notLinuxVariant();\n};\n\nmodule.exports.metricNames = process.platform === 'linux' ? linuxVariant.metricNames : [PROCESS_RESIDENT_MEMORY];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/osMemoryHeapLinux.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar fs = require('fs');\n\nvar values = ['VmSize', 'VmRSS', 'VmData'];\n\nvar PROCESS_RESIDENT_MEMORY = 'process_resident_memory_bytes';\nvar PROCESS_VIRTUAL_MEMORY = 'process_virtual_memory_bytes';\nvar PROCESS_HEAP = 'process_heap_bytes';\n\nfunction structureOutput(input) {\n\tvar returnValue = {};\n\n\tinput.split('\\n')\n\t\t.filter(function(s) {\n\t\t\treturn values.some(function(value) {\n\t\t\t\treturn s.indexOf(value) === 0;\n\t\t\t});\n\t\t})\n\t\t.forEach(function(string) {\n\t\t\tvar split = string.split(':');\n\n\t\t\t// Get the value\n\t\t\tvar value = split[1].trim();\n\t\t\t// Remove trailing ` kb`\n\t\t\tvalue = value.substr(0, value.length - 3);\n\t\t\t// Make it into a number in bytes bytes\n\t\t\tvalue = Number(value) * 1000;\n\n\t\t\treturnValue[split[0]] = value;\n\t\t});\n\n\treturn returnValue;\n}\n\nmodule.exports = function() {\n\tvar residentMemGauge = new Gauge(PROCESS_RESIDENT_MEMORY, 'Resident memory size in bytes.');\n\tvar virtualMemGauge = new Gauge(PROCESS_VIRTUAL_MEMORY, 'Virtual memory size in bytes.');\n\tvar heapSizeMemGauge = new Gauge(PROCESS_HEAP , 'Process heap size in bytes.');\n\n\treturn function() {\n\t\tfs.readFile('/proc/self/status', 'utf8', function(err, status) {\n\t\t\tif(err) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar structuredOutput = structureOutput(status);\n\n\t\t\tresidentMemGauge.set(null, structuredOutput.VmRSS);\n\t\t\tvirtualMemGauge.set(null, structuredOutput.VmSize);\n\t\t\theapSizeMemGauge.set(null, structuredOutput.VmData);\n\t\t});\n\t};\n};\n\nmodule.exports.metricNames = [PROCESS_RESIDENT_MEMORY, PROCESS_VIRTUAL_MEMORY, PROCESS_HEAP];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/helpers/safeMemoryUsage.js":"'use strict';\n\nfunction safeMemoryUsage() {\n\tvar memoryUsage;\n\ttry {\n\t\tmemoryUsage = process.memoryUsage();\n\t} catch (ex) {\n\n\t}\n\n\treturn memoryUsage;\n}\n\nmodule.exports = safeMemoryUsage;\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/processOpenFileDescriptors.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar fs = require('fs');\n\nvar PROCESS_OPEN_FDS = 'process_open_fds';\n\nmodule.exports = function() {\n\tif(process.platform !== 'linux') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar fileDescriptorsGauge = new Gauge(PROCESS_OPEN_FDS, 'Number of open file descriptors.');\n\n\treturn function() {\n\t\tfs.readdir('/proc/self/fd', function(err, list) {\n\t\t\tif(err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Minus 1, as this invocation created one\n\t\t\tfileDescriptorsGauge.set(null, list.length - 1);\n\t\t});\n\t};\n};\n\nmodule.exports.metricNames = [PROCESS_OPEN_FDS];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/processMaxFileDescriptors.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar fs = require('fs');\n\nvar PROCESS_MAX_FDS = 'process_max_fds';\n\nmodule.exports = function() {\n\tvar isSet = false;\n\n\tif(process.platform !== 'linux') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar fileDescriptorsGauge = new Gauge(PROCESS_MAX_FDS, 'Maximum number of open file descriptors.');\n\n\treturn function() {\n\t\tif(isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\tfs.readFile('/proc/sys/fs/file-max', 'utf8', function(err, maxFds) {\n\t\t\tif(err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisSet = true;\n\n\t\t\tfileDescriptorsGauge.set(null, Number(maxFds));\n\t\t});\n\t};\n};\n\nmodule.exports.metricNames = [PROCESS_MAX_FDS];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/eventLoopLag.js":"'use strict';\n\nvar Gauge = require('../gauge');\n\nvar NODEJS_EVENTLOOP_LAG = 'nodejs_eventloop_lag_seconds';\n\nfunction reportEventloopLag(start, gauge) {\n\tvar delta = process.hrtime(start);\n\tvar nanosec = delta[0] * 1e9 + delta[1];\n\tvar seconds = nanosec / 1e9;\n\n\tgauge.set(seconds);\n}\n\nmodule.exports = function() {\n\tvar gauge = new Gauge(NODEJS_EVENTLOOP_LAG, 'Lag of event loop in seconds.');\n\n\treturn function() {\n\t\tvar start = process.hrtime();\n\t\tsetImmediate(reportEventloopLag, start, gauge);\n\t};\n};\n\nmodule.exports.metricNames = [NODEJS_EVENTLOOP_LAG];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/processHandles.js":"'use strict';\n\nvar Gauge = require('../gauge');\n\nvar NODEJS_ACTIVE_HANDLES = 'nodejs_active_handles_total';\n\nmodule.exports = function() {\n\t// Don't do anything if the function is removed in later nodes (exists in node@6)\n\tif(typeof process._getActiveHandles !== 'function') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar gauge = new Gauge(NODEJS_ACTIVE_HANDLES, 'Number of active handles.');\n\n\treturn function() {\n\t\tgauge.set(process._getActiveHandles().length);\n\t};\n};\n\nmodule.exports.metricNames = [NODEJS_ACTIVE_HANDLES];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/processRequests.js":"'use strict';\n\nvar Gauge = require('../gauge');\n\nvar NODEJS_ACTIVE_REQUESTS = 'nodejs_active_requests_total';\n\nmodule.exports = function() {\n\t// Don't do anything if the function is removed in later nodes (exists in node@6)\n\tif(typeof process._getActiveRequests !== 'function') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar gauge = new Gauge(NODEJS_ACTIVE_REQUESTS, 'Number of active requests.');\n\n\treturn function() {\n\t\tgauge.set(process._getActiveRequests().length);\n\t};\n};\n\nmodule.exports.metricNames = [NODEJS_ACTIVE_REQUESTS];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/heapSizeAndUsed.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar safeMemoryUsage = require('./helpers/safeMemoryUsage');\n\nvar NODEJS_HEAP_SIZE_TOTAL = 'nodejs_heap_size_total_bytes';\nvar NODEJS_HEAP_SIZE_USED = 'nodejs_heap_size_used_bytes';\nvar NODEJS_EXTERNAL_MEMORY = 'nodejs_external_memory_bytes';\n\nmodule.exports = function() {\n\tif(typeof process.memoryUsage !== 'function') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar heapSizeTotal = new Gauge(NODEJS_HEAP_SIZE_TOTAL, 'Process heap size from node.js in bytes.');\n\tvar heapSizeUsed = new Gauge(NODEJS_HEAP_SIZE_USED, 'Process heap size used from node.js in bytes.');\n\n\tvar usage = safeMemoryUsage();\n\tif(usage && usage.external) {\n\t\tvar externalMemUsed = new Gauge(NODEJS_EXTERNAL_MEMORY, 'Nodejs external memory size in bytes.');\n\t}\n\n\treturn function() {\n    // process.memoryUsage() can throw EMFILE errors, see #67\n\t\tvar memUsage = safeMemoryUsage();\n\t\tif(memUsage) {\n\t\t\theapSizeTotal.set(memUsage.heapTotal);\n\t\t\theapSizeUsed.set(memUsage.heapUsed);\n\t\t\tif(memUsage.external && externalMemUsed) {\n\t\t\t\texternalMemUsed.set(memUsage.external);\n\t\t\t}\n\t\t}\n\n\t\treturn {total: heapSizeTotal, used: heapSizeUsed, external: externalMemUsed};\n\t};\n};\n\nmodule.exports.metricNames = [NODEJS_HEAP_SIZE_TOTAL, NODEJS_HEAP_SIZE_USED, NODEJS_EXTERNAL_MEMORY];\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/heapSpacesSizeAndUsed.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar v8;\n\ntry {\n\tv8 = require('v8');\n} catch (e) {\n  // node version is too old\n  // probably we can use v8-heap-space-statistics for >=node-4.0.0 and <node-6.0.0\n}\n\nvar METRICS = [\n\t'total',\n\t'used',\n\t'available'\n];\n\nvar NODEJS_HEAP_SIZE = {};\n\nMETRICS.forEach(function(metricType) {\n\tNODEJS_HEAP_SIZE[metricType] = 'nodejs_heap_space_size_' + metricType + '_bytes';\n});\n\n\nmodule.exports = function() {\n\tif(typeof v8 === 'undefined' || typeof v8.getHeapSpaceStatistics !== 'function') {\n\t\treturn function() {\n\t\t};\n\t}\n\n\tvar gauges = {};\n\n\tMETRICS.forEach(function(metricType) {\n\t\tgauges[metricType] = new Gauge(\n      NODEJS_HEAP_SIZE[metricType],\n      'Process heap space size ' + metricType + ' from node.js in bytes.',\n      ['space']\n    );\n\t});\n\n\treturn function() {\n\t\tvar data = {\n\t\t\ttotal: {},\n\t\t\tused: {},\n\t\t\tavailable: {}\n\t\t};\n\n\t\tv8.getHeapSpaceStatistics().forEach(function onEachSpace(space) {\n\t\t\tvar spaceName = space.space_name.substr(0, space.space_name.indexOf('_space'));\n\n\t\t\tdata.total[spaceName] = space.space_size;\n\t\t\tdata.used[spaceName] = space.space_used_size;\n\t\t\tdata.available[spaceName] = space.space_available_size;\n\n\t\t\tgauges.total.set({space: spaceName}, space.space_size);\n\t\t\tgauges.used.set({space: spaceName}, space.space_used_size);\n\t\t\tgauges.available.set({space: spaceName}, space.space_available_size);\n\t\t});\n\n\t\treturn data;\n\t};\n};\n\nmodule.exports.metricNames = METRICS.map(function(metricType) {\n\treturn NODEJS_HEAP_SIZE[metricType];\n});\n","/home/travis/build/npmtest/node-npmtest-prom-client/node_modules/prom-client/lib/metrics/version.js":"'use strict';\n\nvar Gauge = require('../gauge');\nvar version = process.version;\nvar versionSegments = version.slice(1).split('.').map(Number);\n\nvar NODE_VERSION_INFO = 'nodejs_version_info';\n\nmodule.exports = function() {\n\tvar nodeVersionGauge = new Gauge(NODE_VERSION_INFO, 'Node.js version info.', ['version', 'major', 'minor', 'patch']);\n\tvar isSet = false;\n\n\treturn function() {\n\t\tif(isSet) {\n\t\t\treturn;\n\t\t}\n\t\tnodeVersionGauge.labels(version, versionSegments[0], versionSegments[1], versionSegments[2]).set(1);\n\t\tisSet = true;\n\t};\n};\n\nmodule.exports.metricNames = [NODE_VERSION_INFO];\n"}